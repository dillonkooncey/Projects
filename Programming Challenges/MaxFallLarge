package ProgrammingChallenges;

import java.util.Scanner;

/**
 * Finding the maximum fall in an array. Must fall from left to right.
 * Must be solved in O(n logn) runtime or better.
 * Solved in O(n)
 * @author Dillon Koonce
 */
public class MaxFallLarge {

    public static void main(String[] args) {
        // Allow user to input an array size and elements of their choosing.
        Scanner input = new Scanner(System.in);
        int numElements = input.nextInt();
        int[] nums = new int[numElements];

        for (int i = 0; i < nums.length; i++) {
            int number = input.nextInt();
            nums[i] = number;
        }
        System.out.println();
        int answer = maxFall(nums);
        System.out.println(answer);
        System.out.println();
    }

    /**
     * Method that finds the max fall in O(n) runtime.
     * @param arr - arry
     * @return - Max fall size.
     */
    private static int maxFall(int[] arr) {
        // If arr size is 1 or 0 there is no where to fall to so max fall is 0.
        if (arr.length == 0 || arr.length == 1) {
            return 0;
        }
        // Set the initial difference = 0;
        int diff = 0;
        // Initialize the max and min to the last element of array.
        int max = arr[arr.length - 1];
        int min = arr[arr.length - 1];
        int n = arr.length - 1;
        // Loop through array starting at the end.
        for (int i = n; i >= 0; i--) {
            // If the current element - min is bigger than the current max fall then make that the new max fall.
            if (arr[i] - min > diff) {
                diff = arr[i] - min;
                // If current > max set a new max.
            } else if (arr[i] > max) {
                max = arr[i];
                // Else if current is < min set the new min.
            } else if (arr[i] < min) {
                min = arr[i];
            }
        }
        // If max fall is negative there is no distance to fall going from left to right so return 0
        if (diff < 0) {
            return 0;
            // Else there is a eligable fall so return the max fall.
        } else {
            return diff;
        }
    }
    
}
