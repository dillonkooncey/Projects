
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;


/**
 * LeetCode Problems.
 *
 * @author Dillon Koonce
 */
public class LeetCode {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String s = scan.nextLine();
        System.out.println(s);
    }

    /**
     * Given an array of integers nums and an integer target, return indices of
     * the two numbers such that they add up to target. You may assume that each
     * input would have exactly one solution, and you may not use the same
     * element twice. You can return the answer in any order.
     *
     * @param nums
     * @param target
     * Problem #1
     */
    public static void twoSum(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            int first = nums[i];
            for (int j = 1; j < nums.length; j++) {
                int second = nums[j];
                if (first + second == target) {
                    System.out.println("[" + i + ", " + j + "]");
                }
            }
        }
    }

    /**
     * Find a peak of an integer array. If it exists. Binary search is a more
     * efficient way to do this.
     *
     * @param numbers
     * Problem #2
     */
    public static void peakFinder(int[] numbers) {
        int answer = numbers[0];
        for (int i = 0; i < numbers.length; i++) {
            if (numbers[i] > answer) {
                answer = numbers[i];
            }
        }
        System.out.println(answer);
    }

    
    
    /**
     * Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]â€¦nums[i]).
     * Return the running sum of nums.
     * Problem #3
     */
    private static void runningSum() {
        int[] arr = {1,1,1,1,1};
        int sum = 0;
        ArrayList<Integer> answers = new ArrayList<Integer>();
        for(int i = 0; i < arr.length; i++) {
            sum += arr[i];
            answers.add(sum);
        }
        System.out.println(answers.toString());
    }
    
    /**
     * Given the array candies and the integer extraCandies, where candies[i] represents the number of candies that the ith kid has.
     * For each kid check if there is a way to distribute extraCandies among the kids such that he or she can have the greatest number of candies among them. 
     * Notice that multiple kids can have the greatest number of candies.
     * Problem #4
     */
    private static void greatestNumberCandies() {
        int[] candies = {2,3,5,1,3};
        int greatest = 0;
        int extra = 3;
        for(int i = 0; i < candies.length; i++) {
            if(candies[i] > greatest) {
                greatest = candies[i];
            }
        }
        
        List<Boolean> boo = new ArrayList<Boolean>();
        for(int i = 0; i < candies.length; i++) {
            if(candies[i] + extra >= greatest) {
                boo.add(Boolean.TRUE);
            } else {
                boo.add(Boolean.FALSE);
            }
        }
        System.out.println(boo.toString());
    }
    
    /**
     * Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].
     * Return the array in the form [x1,y1,x2,y2,...,xn,yn].
     * Problem #5
     */
    private static void shuffle() {
        int[] arr = {2,5,1,3,4,7};
        int[] left = Arrays.copyOfRange(arr, 0, arr.length / 2);
        int[] right = Arrays.copyOfRange(arr, arr.length / 2, arr.length);
        ArrayList<Integer> answer = new ArrayList<Integer>();
        while (left.length > 0 && right.length > 0) {
            answer.add(left[0]);
            answer.add(right[0]);
            left = Arrays.copyOfRange(left, 1, left.length);
            right = Arrays.copyOfRange(right, 1, right.length);
        }
        System.out.println(answer.toString());
    }
    
    /**
     * Given an array of integers nums.
     * A pair (i,j) is called good if nums[i] == nums[j] and i < j.
     * Return the number of good pairs.
     * Problem #6
     */
    private static void numIdenticalPairs() {
        int[] arr = {1,2,3,1,1,3};
        int numPairs = 0;
        for(int i = 0; i < arr.length; i++) {
            for(int j = i + 1; j < arr.length; j++) {
                if(arr[i] == arr[j] && i < j) {
                    numPairs++;
                }
            }
        }
        System.out.println(numPairs);
    }
    
    /**
     * Problem #7
     */
    private static void jewelsInStones() {
        String jewels = "z";
        String stones = "ZZ";
        int numMatches = 0;
        char[] chars = new char[jewels.length()];
        while (jewels.length() > 0) {
            chars[0] = jewels.charAt(0);
            jewels = jewels.substring(1, jewels.length());
        }
        for(int i = 0; i < chars.length; i++) {
            for(int j = 0; j < stones.length(); j++) {
                if(chars[i] == stones.charAt(j)) {
                    numMatches++;
                }
            }
        }
        System.out.println(numMatches);
    }
    
    /**
     * Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. 
     * That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].
     * Return the answer in an array.
     * Problem #8
     */
    private static void smallerThanCurrent() {
        int[] arr = {8,1,2,2,3};
        int[] answer = new int[arr.length];
        for(int i = 0; i < arr.length; i++) {
            int smaller = 0;
            for(int j = 0; j < arr.length; j++) {
                if(arr[j] < arr[i]) {
                    smaller++;
                }
                answer[i] = smaller;
            }
        }
        System.out.println(Arrays.toString(answer));
    }
    
    /**
     * Given a non-negative integer num, return the number of steps to reduce it to zero. 
     * If the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.
     * Problem #9
     */
    private static void numberOfSteps() {
        int num = 14;
        int count = 0;
        while(num > 0) {
            if(num % 2 == 0) {
                num = num / 2;
            } else {
                num = num - 1;
            }
            count++;
        }
        System.out.println(count);
    }
    
    private static void rotateLeft() {
              
        
    }
}
 
